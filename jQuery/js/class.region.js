var STRPG = STRPG || {};
STRPG.classes = STRPG.classes || {}; // Giving a namespace to the class we're creating. It keeps things out of global.


(function(){ // IIFE: http://benalman.com/news/2010/11/immediately-invoked-function-expression/

	var Region = function(settings) {
		// Very important. Our constructor passes all of the parameters to the initialize function.
		// Our custom stuff will live in that function.
		this.initialize(settings);
	}

	/**
	 * This next bit is extremely important. Since we're inheriting from createjs.Shape(), we need to make 
	 * sure that the initialize function for that is called before our custom stuff comes in. First, we make 
	 * our constructor equals Shape's, so we are now inheriting everything. I'm also assigning it to a short 
	 * variable name to make the rest of the code more readable. 
	 */
	var tempConstructor = Region.prototype = new createjs.Shape(); // inheriting from CreateJS Shape class.

	/**
	 * Now that we have everything that createjs.Shape() has, we need to save the initialize function to another 
	 * name. We'll need to call it in a moment, unchanged and out-of-the-box. So now the original initialize 
	 * function will be called Star.Shape_initialize().
	 */
	Region.prototype.Shape_initialize = tempConstructor.initialize;

	/**
	 * Now we're ready to make our own initialize function. First we call the original function, now named 
	 * Star.Shape_initialize(), so we can have all the super powers of createjs.Shape(). Then we have our 
	 * custom code. We set some variables which are mostly matched up to the docs for the Shape class. For more 
	 * details on that, go here: http://createjs.com/Docs/EaselJS/classes/Shape.html
	 * @type {Function}
	 */
	Region.prototype.initialize = function(settings) {
		this.Shape_initialize();
		// add custom setup logic here.

		//this.id = settings.id;				// Optional number id for the Shape, not to be confused with the HTML id attribute.
		this.name = settings.name || '';		// We can also give it a text name. Remember this from ActionScript?
		this.x = settings.x;
		this.y = settings.y;
		this.alpha = settings.alpha;
		this.color = settings.color;
		this.region = settings.region;

		switch (this.name) {
		case 'UFP':
			this.graphics.beginFill(this.color)
				.moveTo(440,907.463)
				.bezierCurveTo(440,907.463,451.814,918.9789999999999,463.253,919.627)
				.bezierCurveTo(478.19599999999997,920.4749999999999,507.114,897.7829999999999,521.754,897.7829999999999)
				.bezierCurveTo(528.893,897.7829999999999,536.275,910.4629999999999,553.455,910.4629999999999)
				.bezierCurveTo(565.6170000000001,910.4629999999999,589,909.3339999999998,600.744,910.7339999999998)
				.bezierCurveTo(608.0740000000001,911.6059999999998,612.1800000000001,910.7949999999998,619.076,899.2969999999998)
				.bezierCurveTo(623.092,892.6039999999998,628.5840000000001,886.8769999999998,629.873,877.9709999999998)
				.bezierCurveTo(631.869,864.1779999999998,623.35,861.6149999999998,623.609,851.5609999999998)
				.bezierCurveTo(623.849,842.2479999999998,635.341,831.8399999999998,651.0740000000001,826.3949999999998)
				.bezierCurveTo(666.6460000000001,821.0039999999998,676.2070000000001,822.8029999999998,682.869,820.7989999999998)
				.bezierCurveTo(689.0980000000001,818.9259999999997,693.0980000000001,815.3419999999998,690.4920000000001,801.3789999999998)
				.bezierCurveTo(688.9780000000001,793.2749999999997,692.219,779.9999999999998,692.219,779.9999999999998)
				.lineTo(440,779.9999999999998)
				.lineTo(440,907.463)
			.endFill().closePath();
			break;
		case 'KE':
			this.graphics.beginFill(this.color)
				.moveTo(440,928.719)
				.bezierCurveTo(469.402,930.172,468.114,933.801,487.595,954.129)
				.bezierCurveTo(492.65700000000004,959.41,499.211,961.268,509.677,962.113)
				.bezierCurveTo(513.604,962.4300000000001,514.827,966.022,521.112,966.652)
				.bezierCurveTo(525.346,967.0740000000001,533.967,964.582,541.987,971.7320000000001)
				.bezierCurveTo(549.247,978.2070000000001,546.549,981.3260000000001,549.61,987.5230000000001)
				.bezierCurveTo(551.563,991.4730000000002,553.832,994.2320000000001,556.75,1001.3160000000001)
				.bezierCurveTo(558.443,1005.4280000000001,555.086,1011.3050000000002,557.717,1017.0450000000002)
				.bezierCurveTo(561.709,1025.7580000000003,563.946,1044.6330000000003,577.7379999999999,1055.582)
				.bezierCurveTo(586.334,1062.4060000000002,584.396,1058.7230000000002,593.103,1068.9530000000002)
				.bezierCurveTo(602.785,1080.3260000000002,603.996,1095.4510000000002,618.632,1107.5510000000002)
				.bezierCurveTo(635.3059999999999,1121.3280000000002,654.79,1141.3260000000002,664.612,1153.1660000000002)
				.bezierCurveTo(673.444,1163.813,676.837,1166.074,683.848,1169.3790000000001)
				.bezierCurveTo(692.3209999999999,1173.373,693.967,1180.8550000000002,697.8829999999999,1183.9)
				.bezierCurveTo(704.4159999999999,1188.979,713.737,1195.0310000000002,717.3029999999999,1201.324)
				.bezierCurveTo(719.8259999999999,1205.77,719.4509999999999,1214.268,726.1099999999999,1224.553)
				.bezierCurveTo(733.3459999999999,1235.74,743.8739999999999,1243.365,745.7509999999999,1255.248)
				.bezierCurveTo(747.2509999999999,1264.748,746.6469999999998,1289.998,721.1259999999999,1289.998)
				.bezierCurveTo(709.2669999999998,1290,439.9999999999999,1289.998,439.9999999999999,1289.998)
				.bezierCurveTo(439.9999999999999,1289.998,440,935.979,440,928.719)
			.endFill().closePath();
			break;
		case 'RSA':
			this.graphics.beginFill(this.color)
				.moveTo(734.039,780.001)
				.bezierCurveTo(734.039,780.001,726.424,786.9689999999999,716.254,796.107)
				.bezierCurveTo(707.904,803.607,707.08,812.211,707.725,817.7049999999999)
				.bezierCurveTo(708.51,824.42,710.327,824.4799999999999,711.836,828.4749999999999)
				.bezierCurveTo(713.586,833.0919999999999,713.289,835.1289999999999,714.561,837.7909999999999)
				.bezierCurveTo(715.9540000000001,840.709,717.5490000000001,841.252,717.163,845.895)
				.bezierCurveTo(716.073,858.963,709.44,872.24,706.517,884.193)
				.bezierCurveTo(705.124,889.879,698.3240000000001,905.971,698.3800000000001,911.1129999999999)
				.bezierCurveTo(698.4050000000001,913.2539999999999,698.1670000000001,917.6229999999999,696.7470000000001,920.188)
				.bezierCurveTo(693.2980000000001,926.418,689.6200000000001,924.6949999999999,684.6750000000001,930.775)
				.bezierCurveTo(679.4110000000001,937.25,675.782,950.799,678.5050000000001,959.029)
				.bezierCurveTo(682.0480000000001,969.742,689.0300000000001,980.447,698.6510000000001,986.619)
				.bezierCurveTo(709.706,993.711,715.1410000000001,997.869,717.5260000000001,1003.98)
				.bezierCurveTo(723.758,1019.953,719.6690000000001,1031.979,717.7080000000001,1046.814)
				.bezierCurveTo(716.3170000000001,1057.338,719.1940000000001,1063.133,718.4380000000001,1068.7130000000002)
				.bezierCurveTo(716.2600000000001,1084.8050000000003,710.2500000000001,1084.5510000000002,709.5430000000001,1093.5760000000002)
				.bezierCurveTo(708.9060000000002,1101.7400000000002,726.2810000000002,1132.7190000000003,726.7810000000002,1149.1250000000002)
				.bezierCurveTo(727.0020000000002,1156.3360000000002,704.2750000000002,1166.6370000000002,712.8020000000001,1173.6230000000003)
				.bezierCurveTo(716.9330000000001,1177.0080000000003,723.3270000000001,1177.2480000000003,728.0460000000002,1189.0450000000003)
				.bezierCurveTo(732.7670000000002,1200.8420000000003,734.5300000000002,1220.4530000000002,733.9520000000001,1224.8980000000004)
				.bezierCurveTo(733.0440000000001,1231.8830000000003,746.4790000000002,1239.4880000000003,747.6550000000001,1249.4000000000003)
				.bezierCurveTo(748.4970000000001,1256.5000000000002,753.2470000000001,1257.5000000000002,755.3840000000001,1265.0080000000003)
				.bezierCurveTo(757.1500000000001,1268.5430000000003,758.6500000000001,1289.9990000000003,762.1930000000001,1289.9990000000003)
				.bezierCurveTo(764.1500000000001,1289.9990000000003,785.0000000000001,1289.9990000000003,785.0000000000001,1289.9990000000003)
				.lineTo(785.0000000000001,780.001)
				.lineTo(734.039,780.001)
			.endFill().closePath();
			break;
		case 'AOFW':
			this.graphics.beginFill(this.color)
				.moveTo(573.517,925.938)
				.bezierCurveTo(571.148,920.867,574.3800000000001,914.449,581.5580000000001,914.449)
				.bezierCurveTo(588.1220000000001,914.449,585.2750000000001,914.693,593.6890000000001,914.203)
				.bezierCurveTo(602.1050000000001,913.7149999999999,622.4100000000001,911.736,628.099,914.305)
				.bezierCurveTo(633.788,916.871,640.101,919.8069999999999,644.3100000000001,927.627)
				.bezierCurveTo(648.517,935.4509999999999,657.22,968.127,656.474,979.4019999999999)
				.bezierCurveTo(656.105,985.025,649.427,987.805,640.378,989.18)
				.bezierCurveTo(632.335,990.4019999999999,619.4250000000001,982.289,610.6400000000001,979.236)
				.bezierCurveTo(602.2860000000001,976.328,591.6360000000001,978.381,584.9040000000001,976.299)
				.bezierCurveTo(580.9430000000001,975.076,578.3280000000001,973.006,576.738,969.209)
				.bezierCurveTo(575.2520000000001,965.664,577.2320000000001,961.5079999999999,576.738,955.7639999999999)
				.bezierCurveTo(576.115,948.5409999999999,577.1070000000001,947.156,577.1070000000001,943.5389999999999)
				.bezierCurveTo(577.107,938.041,576.488,932.297,573.517,925.938)
			.endFill().closePath();
			break;
		case 'OFMA':
			this.graphics.beginFill(this.color)
				.moveTo(481.916,918.949)
				.bezierCurveTo(481.986,916.2249999999999,485.09,916.084,487.724,914.7149999999999)
				.bezierCurveTo(490.748,913.1429999999999,493.64799999999997,912.9319999999999,494.621,913.2639999999999)
				.bezierCurveTo(499.94399999999996,915.0779999999999,501.486,917.3199999999999,507.899,917.377)
				.bezierCurveTo(520.844,917.4979999999999,524.542,911.2109999999999,532.976,912.1479999999999)
				.bezierCurveTo(538.421,912.7529999999999,540.841,920.0129999999999,537.575,923.8839999999999)
				.bezierCurveTo(534.0440000000001,928.0709999999999,531.316,927.1179999999999,526.596,935.5889999999999)
				.bezierCurveTo(523.827,940.558,520.846,945.06,517.578,952.0749999999999)
				.bezierCurveTo(515.592,956.343,509.36999999999995,958.5849999999999,507.051,953.286)
				.bezierCurveTo(505.359,949.415,504.67199999999997,946.487,496.976,936.3149999999999)
				.bezierCurveTo(489.836,926.879,481.793,923.668,481.916,918.949)
			.endFill().closePath();
			break;
		case 'MCA':
			this.graphics.beginFill(this.color)
				.moveTo(653.826,1085.242)
				.bezierCurveTo(651.467,1082.2169999999999,654.371,1075.135,661.086,1075.135)
				.bezierCurveTo(667.801,1075.135,699.565,1087.863,704.463,1096.676)
				.bezierCurveTo(705.674,1098.857,706.098,1102.7269999999999,705.313,1103.9379999999999)
				.bezierCurveTo(703.213,1107.164,699.141,1106.84,695.571,1105.7499999999998)
				.bezierCurveTo(688.87,1103.7069999999999,682.1,1103.8169999999998,675.7900000000001,1106.1129999999998)
				.bezierCurveTo(672.4620000000001,1107.3239999999998,670.042,1107.686,667.9250000000001,1106.475)
				.bezierCurveTo(664.378,1104.4489999999998,666.595,1100.0629999999999,663.085,1094.3149999999998)
				.bezierCurveTo(659.556,1088.543,656.183,1088.268,653.826,1085.242)
			.endFill().closePath();
			break;
		case 'IKS':
			this.graphics.beginFill(this.color)
				.moveTo(651.251,895.563)
				.bezierCurveTo(654.0319999999999,891.693,659.9309999999999,890.762,663.4399999999999,884.917)
				.bezierCurveTo(664.53,883.1030000000001,663.9219999999999,880.196,665.252,876.931)
				.bezierCurveTo(667.203,872.144,673.063,868.2080000000001,676.4159999999999,865.317)
				.bezierCurveTo(679.9259999999999,862.294,684.4019999999999,863.38,685.2479999999999,867.8580000000001)
				.bezierCurveTo(686.0959999999999,872.3370000000001,685.4899999999999,874.272,687.5469999999999,877.9010000000001)
				.bezierCurveTo(689.6019999999999,881.5240000000001,689.637,881.4630000000001,693.358,884.884)
				.bezierCurveTo(696.381,887.667,696.4129999999999,893.569,691.299,894.5070000000001)
				.bezierCurveTo(686.701,895.3560000000001,683.973,893.11,679.3199999999999,894.9910000000001)
				.bezierCurveTo(674.2379999999999,897.0480000000001,674.6009999999999,899.8310000000001,668.429,902.3720000000001)
				.bezierCurveTo(663.322,904.4760000000001,659.476,905.518,654.394,903.5830000000001)
				.bezierCurveTo(649.316,901.647,651.251,895.563,651.251,895.563)
			.endFill().closePath();
			break;
		default:
			// Do nothing
		}
	}
	STRPG.classes.Region = Region;
}()); // End of IIFE